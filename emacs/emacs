;;======================================================================
;; (dot)emacs file
;; my-config for emacs
;; --rho
;;======================================================================

;; remove startup screen
(custom-set-variables
 '(ibus-python-shell-command-name "python2")
 '(inhibit-startup-screen t))

;;----------------------------------------------------------------------
;; Remove unused UI elements
;;(tool-bar-mode 0)
;;(menu-bar-mode 0)
(scroll-bar-mode 0)
(global-visual-line-mode t)

;;----------------------------------------------------------------------
;; backupfile
(setq make-backup-files nil)

;;----------------------------------------------------------------------
;; ansi-color sequence for complitaion mode
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

;;----------------------------------------------------------------------
;; Shortcut Keys
(global-set-key [C-f8] 'compile)
(global-set-key (kbd "C-z") 'undo)
;; Invoke M-x without the Alt key
;; https://sites.google.com/site/steveyegge2/effective-emacs#item2
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
;; Resize Windows
;; http://www.emacswiki.org/emacs/WindowResize
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;;----------------------------------------------------------------------
;; nuke trailing whitespaces when writing to a file
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;;----------------------------------------------------------------------
;; line-number
(add-hook 'find-file-hook (lambda() (linum-mode 1)))
(global-linum-mode 1)

;;----------------------------------------------------------------------
;; color current line
;; 'http://raebear.net/comp/emacscolors.html'
(global-hl-line-mode 1)
(set-face-background 'hl-line "#b4eeb4")
(set-face-background 'region' "#a1a9c1")

;;----------------------------------------------------------------------
;; column mode
(column-number-mode 1)

;;----------------------------------------------------------------------
;; show matching parens
(show-paren-mode 1)

;;----------------------------------------------------------------------
;; Duplicate Lines
(defun duplicate-current-line()
  (interactive)
  (beginning-of-line nil)
  (let ((b (point)))
    (end-of-line nil)
    (copy-region-as-kill b (point)))
  (beginning-of-line 2)
  (open-line 1)
  (yank)
  (back-to-indentation))
(global-set-key (kbd "C-`") 'duplicate-current-line)

;;----------------------------------------------------------------------
;; word-sort
;; http://www.emacswiki.org/emacs/SortWords
(defun sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
Prefixed with negative \\[universal-argument], sorts in reverse.

The variable `sort-fold-case' determines whether alphabetic case
affects the sort order.

See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))

;;----------------------------------------------------------------------
;; lisp-mode auto-load for .emacs
(setq auto-mode-alist (append '((".emacs" . lisp-mode)) auto-mode-alist))

;;----------------------------------------------------------------------
;; server start
;; M-x server-start
(and window-system (server-start))

;;============================= PLUGINS ================================
;;----------------------------------------------------------------------
;; AUCTeX
(load "auctex.el" nil t t)
;; (load "preview-latex.el" nil t t)

;;----------------------------------------------------------------------
;; Interactively Do Things [IDO]
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ;; enable fuzzy matching

;;----------------------------------------------------------------------
;; gnuplot-mode
(autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
(autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)
(setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
(global-set-key [(f9)] 'gnuplot-make-buffer)

;;----------------------------------------------------------------------
;; Arch pkg-build mode
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(setq auto-mode-alist (append '(("/PKGBUILD.*" . pkgbuild-mode)) auto-mode-alist))

;;----------------------------------------------------------------------
;; python mode using emacs in-bulit
;; https://github.com/antonj/Highlight-Indentation-for-Emacs

(add-to-list 'load-path  "~/.emacs.d/highlight-indentation")
(autoload 'highlight-indentation "highlight-indentation.el" "Highlight indentation." t)
(add-hook 'python-mode-hook 'highlight-indentation)
(custom-set-faces
 '(highlight-indent-face ((t (:inherit fringe :background "light green")))))

;;----------------------------------------------------------------------
;; php mode
(autoload 'php-mode "php-mode.el" "Php mode." t)
(setq auto-mode-alist (append '(("/*.\.php[345]?$" . php-mode)) auto-mode-alist))

;;----------------------------------------------------------------------
;; ibus input method
(require 'ibus)
;; Turn on ibus-mode automatically after loading .emacs
;; (add-hook 'after-init-hook 'ibus-mode-on)
;; Choose your key to toggle input status:
;; (ibus-define-common-key ?\S-\s nil)
;; (global-set-key (kbd "C-S-SPC") 'ibus-toggle)
;; (global-set-key (kbd "C-\\") 'ibus-toggle)
;; Change cursor color depending on IBus status
(setq ibus-cursor-color '("red" "blue" "limegreen"))

;;----------------------------------------------------------------------
;; markdown mode
(autoload 'markdown-mode "markdown-mode.el"
  "Major mode for editing Markdown files" t)
(setq auto-mode-alist
      (cons '("\.md" . markdown-mode) auto-mode-alist))

(custom-set-faces
 '(markdown-header-delimiter-face ((t (:inherit font-lock-function-name-face :underline t :weight bold))) t)
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.5))) t)
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.3))) t)
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :underline t :height 1.2))) t)
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :underline t :height 1.1))) t)
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :underline t))) t)
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :underline t))) t))
(put 'set-goal-column 'disabled nil)


;;----------------------------------------------------------------------
;; yasnippet
(add-to-list 'load-path "/usr/share/emacs/site-lisp/yas")
(require 'yasnippet)
(yas/global-mode 1)

;;----------------------------------------------------------------------
;; CC-mode
;; http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html
(defun my-make-CR-do-indent ()
  (define-key c-mode-base-map "\C-m" 'c-context-line-break))
(add-hook 'c-initialization-hook 'my-make-CR-do-indent)

;;----------------------------------------------------------------------
;; color-themes
;;(require 'color-theme)

;;----------------------------------------------------------------------
;; Emacs Speaks Statistics
;; http://ess.r-project.org/
;; (setq load-path (cons "/usr/share/emacs/site-lisp/ess" load-path))
;; (require 'ess-site)

;;----------------------------------------------------------------------
;; ide-skel
;; (require 'ide-skel)
;; (global-set-key [f4] 'ide-skel-proj-find-files-by-regexp)
;; (global-set-key [f5] 'ide-skel-proj-grep-files-by-regexp)
;; (global-set-key [f10] 'ide-skel-toggle-left-view-window)
;; (global-set-key [f11] 'ide-skel-toggle-bottom-view-window)
;; (global-set-key [f12] 'ide-skel-toggle-right-view-window)

;;----------------------------------------------------------------------
;; auto-complete
(add-to-list 'load-path "/usr/share/emacs/site-lisp/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/usr/share/emacs/site-lisp/auto-complete/ac-dict")
(ac-config-default)

;;========================== FROZEN-PLUGINS ============================
(add-to-list 'load-path  "~/.emacs.d/plug-ins/")

;;----------------------------------------------------------------------
;; tty-colors
;; http://www.opensource.apple.com/source/emacs/emacs-56/emacs/lisp/term/tty-colors.el?txt
;;(require 'tty-colors)

;;----------------------------------------------------------------------
;; smooth-scroll
;; http://www.emacswiki.org/emacs/SmoothScrolling
(require 'smooth-scroll)
(smooth-scroll-mode t)

;;----------------------------------------------------------------------
;; tabbar mode
;; http://emacswiki.org/emacs/TabBarMode
(require 'tabbar)
(define-key global-map [(control tab)] 'tabbar-forward)
(define-key global-map (kbd "C-S-<iso-lefttab>") 'tabbar-backward)
(tabbar-mode 1)

;;----------------------------------------------------------------------
;; hideshowvis mode
;; http://www.emacswiki.org/emacs/hideshowvis.el
(autoload 'hideshowvis-enable "hideshowvis" "Highlight foldable regions")
(autoload 'hideshowvis-minor-mode
  "hideshowvis"
  "Will indicate regions foldable with hideshow in the fringe."
  'interactive)

(dolist (hook (list 'emacs-lisp-mode-hook
                    'c++-mode-hook
		    'python-mode-hook))
  (add-hook hook 'hideshowvis-enable))

(add-hook 'hideshowvis-minor-mode-hook 'hideshowvis-symbols)

;;----------------------------------------------------------------------
;; python stuff
;; http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/
;; (require 'python-pep8)
;; (require 'python-pylint)

;;----------------------------------------------------------------------
;; custom mode line
;; http://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html
;; (load-library "~/.emacs.d/plug-ins/customodline")

;;----------------------------------------------------------------------
;; window-number
;; http://emacswiki.org/emacs/window-number.el
;; (require 'window-number)
;; (window-number-mode)
;; (window-number-meta-mode)

;;========================== ROLLING PLUGINS ===========================

;;----------------------------------------------------------------------
;; python-info-look [C-h S]
(add-to-list 'load-path "~/.emacs.d/pydoc-info")
(require 'pydoc-info)
(require 'info-look)

;;----------------------------------------------------------------------
;; json-mode
(add-to-list 'load-path "~/.emacs.d/json-mode")
(autoload 'json-mode "json-mode.el"
  "Major mode for editing Markdown files" t)
(setq auto-mode-alist
      (cons '("\.json" . json-mode) auto-mode-alist))

;;----------------------------------------------------------------------
;; emoji-git
;; http://d.hatena.ne.jp/tomoya/20090706/1246874191
;; (add-to-list 'load-path  "~/.emacs.d/emoji-git/")
;; (require 'emoji)

;;----------------------------------------------------------------------
;; nyan-mode-git
;; (add-to-list 'load-path  "~/.emacs.d/nyan-mode-git/")
;; (require 'nyan-mode)
;; (nyan-mode 1)

;;========================== EMACS'S PLUGINS ===========================
;;---------------------------------------------------------------------
;; elpy
;; https://github.com/jorgenschaefer/elpy
;; (package-initialize)
;; (elpy-enable)
;; ;;(auto-complete-mode 0)
;; (setq ac-sources
;;       (delq 'ac-source-nropemacs-dot
;;             (delq 'ac-source-nropemacs
;;                   ac-sources)))
;;(setq load-home-init-file t) ; don't load init file from ~/.xemacs/init.el
